
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { generateAILessonPlan, LessonGenerationRequest, LessonExerciseData, PromptData } from '@/services/aiService';

interface GenerateFullPlanProps {
  lessonData: any;
  equipmentNames: string[];
  onSuccess: (exerciseData: LessonExerciseData, promptData?: PromptData) => void;
}

export const GenerateFullPlan: React.FC<GenerateFullPlanProps> = ({
  lessonData,
  equipmentNames,
  onSuccess
}) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerate = async () => {
    if (!lessonData) {
      console.error('‚ùå Chyb√≠ lesson data');
      return;
    }
    
    setIsGenerating(true);
    console.log('üöÄ Zaƒç√≠n√°m generov√°n√≠ AI pl√°nu...');
    
    try {
      // P≈ô√≠prava dat pro generov√°n√≠
      const request: LessonGenerationRequest = {
        school: lessonData.school || '',
        construct: lessonData.construct || '',
        environment: lessonData.environment || '',
        equipment: equipmentNames || [],
        preparationTime: lessonData.preparationTime || 10,
        mainTime: lessonData.mainTime || 25,
        finishTime: lessonData.finishTime || 10,
        preparationRole: lessonData.preparationRole || '',
        mainRole: lessonData.mainRole || '',
        finishRole: lessonData.finishRole || '',
        grade: lessonData.grade || 1
      };
      
      console.log('üìã Request pro AI:', request);
      console.log('üéí Vybaven√≠:', equipmentNames);
      
      // Vol√°n√≠ AI slu≈æby
      const result = await generateAILessonPlan(request);
      
      console.log('üì• V√Ωsledek z AI:', result);
      
      if (result && result.exercises) {
        console.log('‚úÖ AI √∫spƒõ≈°nƒõ vygenerovalo pl√°n');
        // √öspƒõ≈°n√© generov√°n√≠
        onSuccess(result.exercises, result.promptData);
        
        toast({
          title: "Alternativn√≠ pl√°n vygenerov√°n",
          description: "Byl vytvo≈ôen nov√Ω pl√°n hodiny s alternativn√≠mi cviƒçen√≠mi.",
        });
      } else {
        console.warn('‚ö†Ô∏è AI nevr√°tilo validn√≠ v√Ωsledek, pou≈æ√≠v√°m z√°lo≈æn√≠ pl√°n');
        // Pou≈æ√≠t z√°lo≈æn√≠ pl√°n p≈ôi chybƒõ
        const backupExercises: LessonExerciseData = {
          preparation: [
            { name: 'Dynamick√© prota≈æen√≠', description: 'S√©rie dynamick√Ωch protahovac√≠ch cvik≈Ø', time: Math.floor(lessonData.preparationTime / 2), phase: 'preparation' },
            { name: 'Pohybov√© hry', description: 'Kr√°tk√© hry pro zv√Ω≈°en√≠ tepov√© frekvence', time: Math.ceil(lessonData.preparationTime / 2), phase: 'preparation' }
          ],
          main: [
            { name: 'Cviƒçen√≠ ve dvojic√≠ch', description: 'Koordinaƒçn√≠ cviƒçen√≠ s vybran√Ωm vybaven√≠m', time: Math.floor(lessonData.mainTime / 3), phase: 'main' },
            { name: '≈†tafety', description: '≈†tafetov√© soutƒõ≈æe s vyu≈æit√≠m konstruktu', time: Math.floor(lessonData.mainTime / 3), phase: 'main' },
            { name: 'Hern√≠ prvky', description: 'Aplikace nauƒçen√Ωch dovednost√≠ v hern√≠ch situac√≠ch', time: Math.ceil(lessonData.mainTime / 3), phase: 'main' }
          ],
          finish: [
            { name: 'Streƒçink', description: 'D≈Økladn√© statick√© prota≈æen√≠', time: Math.floor(lessonData.finishTime / 2), phase: 'finish' },
            { name: 'Zpƒõtn√° vazba', description: 'Zhodnocen√≠ hodiny a diskuse', time: Math.ceil(lessonData.finishTime / 2), phase: 'finish' }
          ]
        };
        
        onSuccess(backupExercises);
        
        toast({
          title: "Pou≈æit z√°lo≈æn√≠ pl√°n",
          description: "Nepoda≈ôilo se spojit s AI, byl pou≈æit z√°lo≈æn√≠ pl√°n cviƒçen√≠.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      console.error('‚ùå Chyba p≈ôi generov√°n√≠ alternativn√≠ho pl√°nu:', error);
      
      // Vytvo≈ô√≠me z√°lo≈æn√≠ pl√°n i p≈ôi chybƒõ
      const backupExercises: LessonExerciseData = {
        preparation: [
          { name: 'Rozcviƒçka', description: 'Z√°kladn√≠ rozcviƒçen√≠ cel√©ho tƒõla', time: lessonData.preparationTime, phase: 'preparation' }
        ],
        main: [
          { name: 'Hlavn√≠ aktivita', description: 'Cviƒçen√≠ zamƒõ≈ôen√© na vybranou dovednost', time: lessonData.mainTime, phase: 'main' }
        ],
        finish: [
          { name: 'Zklid≈àuj√≠c√≠ cviƒçen√≠', description: 'Prota≈æen√≠ a reflexe hodiny', time: lessonData.finishTime, phase: 'finish' }
        ]
      };
      
      onSuccess(backupExercises);
      
      toast({
        title: "Pou≈æit z√°lo≈æn√≠ pl√°n",
        description: `AI generov√°n√≠ selhalo: ${error.message || 'Neoƒçek√°van√° chyba'}. Byl pou≈æit z√°lo≈æn√≠ pl√°n.`,
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button 
      className="w-full" 
      onClick={handleGenerate} 
      disabled={isGenerating}
    >
      {isGenerating ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          Generuji pl√°n...
        </>
      ) : (
        'Vygenerovat alternativn√≠ pl√°n na z√°kladƒõ vybran√©ho vybaven√≠ pomoc√≠ AI'
      )}
    </Button>
  );
};
