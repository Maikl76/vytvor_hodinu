
import { generateAILessonPlan } from '../../ai';
import { WeeklyPlanLessonData } from '../types';
import { hasExercises, isValidLessonData } from '../typeGuards';
import { getWeeklyPlanData } from '../dataLoader';
import { createAIRequest } from '../requestBuilder';
import { saveLessonToDatabase } from './databaseHelpers';
import { supabase } from '@/integrations/supabase/client';
import { LessonExerciseData } from '../../aiService';

export async function generateSingleLesson(
  weeklyPlanId: string,
  week: number,
  lessonNumber: number
): Promise<WeeklyPlanLessonData> {
  try {
    console.log(`ü§ñ GENERUJI JEDNOTLIVOU HODINU ${lessonNumber} V T√ùDNU ${week}`);
    
    // Naƒçteme data pl√°nu pro AI
    const planData = await getWeeklyPlanData(weeklyPlanId);
    
    // Naƒçteme V≈†ECHNY existuj√≠c√≠ hodiny z datab√°ze pro kontext
    const { data: existingLessons, error } = await supabase
      .from('weekly_plan_lessons')
      .select('week_number, lesson_number, lesson_data')
      .eq('plan_id', weeklyPlanId)
      .order('week_number', { ascending: true })
      .order('lesson_number', { ascending: true });
    
    if (error) {
      console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ existuj√≠c√≠ch hodin:', error);
    }
    
    // P≈ôiprav√≠me kontext p≈ôedchoz√≠ch hodin
    const previousLessonsContext: Array<{
      week: number;
      lesson: number;
      exercises: LessonExerciseData;
    }> = [];
    
    if (existingLessons && isValidLessonData(existingLessons)) {
      console.log(`üìö Naƒçteno ${existingLessons.length} existuj√≠c√≠ch hodin z datab√°ze`);
      
      for (const existingLesson of existingLessons) {
        // P≈ôeskoƒç√≠me hodiny, kter√© jsou pozdƒõji ne≈æ ta, kterou generujeme
        if (existingLesson.week_number > week || 
            (existingLesson.week_number === week && existingLesson.lesson_number >= lessonNumber)) {
          continue;
        }
        
        const lessonData = existingLesson.lesson_data;
        const exercises = lessonData && hasExercises(lessonData) 
          ? lessonData.exercises 
          : undefined;
        
        if (exercises) {
          previousLessonsContext.push({
            week: existingLesson.week_number,
            lesson: existingLesson.lesson_number,
            exercises
          });
        }
      }
    }
    
    console.log(`üìö KONTEXT PRO HODINU ${lessonNumber} V T√ùDNU ${week}: ${previousLessonsContext.length} p≈ôedchoz√≠ch hodin`);
    
    // Vytvo≈ô√≠me AI request s kontextem
    const aiRequest = await createAIRequest(planData, week, lessonNumber, weeklyPlanId, previousLessonsContext);
    
    console.log('üöÄ Vol√°m AI s kontextem p≈ôedchoz√≠ch hodin...');
    const aiResult = await generateAILessonPlan(aiRequest);
    
    if (!aiResult) {
      throw new Error('AI generov√°n√≠ selhalo');
    }
    
    // Ulo≈æ√≠me hodinu do datab√°ze
    await saveLessonToDatabase(weeklyPlanId, week, lessonNumber, aiResult.exercises, aiResult.promptData);
    
    console.log(`‚úÖ HODINA ${lessonNumber} V T√ùDNU ${week} VYGENEROV√ÅNA A ULO≈ΩENA`);
    
    return {
      week,
      lessonNumber,
      exercises: aiResult.exercises,
      promptData: aiResult.promptData
    };
  } catch (error: any) {
    console.error(`‚ùå CHYBA P≈òI AI GENEROV√ÅN√ç JEDNOTLIV√â HODINY ${lessonNumber} V T√ùDNU ${week}:`, error);
    throw error;
  }
}
