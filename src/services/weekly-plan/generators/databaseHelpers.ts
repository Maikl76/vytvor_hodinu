
import { supabase } from '@/integrations/supabase/client';
import { LessonExerciseData } from '../../aiService';

export async function saveLessonToDatabase(
  planId: string,
  week: number,
  lessonNumber: number,
  exercises: LessonExerciseData,
  promptData?: any
) {
  try {
    console.log(`üíæ Ukl√°d√°m hodinu ${week}-${lessonNumber} do datab√°ze...`);
    
    // P≈ôevedeme data na JSON kompatibiln√≠ form√°t
    const lessonData = JSON.parse(JSON.stringify({
      exercises,
      promptData
    }));
    
    // Zkontrolujeme, zda hodina ji≈æ existuje
    const { data: existing } = await supabase
      .from('weekly_plan_lessons')
      .select('id')
      .eq('plan_id', planId)
      .eq('week_number', week)
      .eq('lesson_number', lessonNumber)
      .maybeSingle();
    
    if (existing) {
      // Aktualizujeme existuj√≠c√≠ hodinu
      const { error: updateError } = await supabase
        .from('weekly_plan_lessons')
        .update({
          lesson_data: lessonData
        })
        .eq('plan_id', planId)
        .eq('week_number', week)
        .eq('lesson_number', lessonNumber);
      
      if (updateError) {
        console.error('‚ùå Chyba p≈ôi aktualizaci hodiny:', updateError);
        throw updateError;
      }
      
      console.log(`‚úÖ Hodina ${week}-${lessonNumber} aktualizov√°na v datab√°zi`);
    } else {
      // Vytvo≈ô√≠me novou hodinu
      const { error: insertError } = await supabase
        .from('weekly_plan_lessons')
        .insert({
          plan_id: planId,
          week_number: week,
          lesson_number: lessonNumber,
          lesson_data: lessonData
        });
      
      if (insertError) {
        console.error('‚ùå Chyba p≈ôi vkl√°d√°n√≠ hodiny:', insertError);
        throw insertError;
      }
      
      console.log(`‚úÖ Hodina ${week}-${lessonNumber} vlo≈æena do datab√°ze`);
    }
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ hodiny do datab√°ze:', error);
    // Neh√°zeme chybu d√°l, proto≈æe hodina byla vygenerov√°na √∫spƒõ≈°nƒõ
  }
}
