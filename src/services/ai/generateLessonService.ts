
import { LessonGenerationRequest, LessonGenerationResult } from './types';
import { createPromptText, processApiResponse, createFallbackPlan, showErrorToast } from './utils';
import { getAiSettings } from './settings-service';
import { getAiGenerationSettings } from './generation-settings-service';
import { generateWithGroqProvider } from './groq-provider';
import { generateWithOpenAIProvider } from './openai-provider';
import { LessonExerciseData } from './types';

/**
 * Hlavn√≠ funkce pro generov√°n√≠ pl√°nu hodiny pomoc√≠ AI
 * VYLEP≈†EN√Å VERZE - podporuje progresivn√≠ pl√°nov√°n√≠ s kontextem pozice hodiny a p≈ôedchoz√≠ch hodin
 * + nastaven√≠ generov√°n√≠ z admin sekce + znalostn√≠ datab√°zi
 */
export async function generateAILessonPlan(
  request: LessonGenerationRequest & { 
    planId?: string; 
    weekNumber?: number; 
    lessonNumber?: number;
    previousLessonsContext?: Array<{
      week: number;
      lesson: number;
      exercises: LessonExerciseData;
    }>;
  }
): Promise<LessonGenerationResult | null> {
  try {
    console.log('ü§ñ Zaƒç√≠n√°m generov√°n√≠ pl√°nu hodiny pomoc√≠ AI s progresivn√≠m kontextem, nastaven√≠m generov√°n√≠ a znalostn√≠ datab√°z√≠');
    console.log('üìä Request data:', {
      school: request.school,
      construct: request.construct,
      environment: request.environment,
      equipment: request.equipment,
      grade: request.grade,
      planId: request.planId,
      weekNumber: request.weekNumber,
      lessonNumber: request.lessonNumber,
      previousLessonsCount: request.previousLessonsContext?.length || 0
    });

    // Z√≠sk√°me nastaven√≠ AI
    const settings = await getAiSettings();
    if (!settings) {
      console.error('‚ùå Chyba: Nenalezena nastaven√≠ AI');
      showErrorToast('Nastaven√≠ AI nejsou k dispozici');
      return null;
    }

    console.log('‚öôÔ∏è Pou≈æito AI nastaven√≠:', { 
      provider: settings.provider, 
      model: settings.model,
      ai_enabled: settings.ai_enabled 
    });

    if (!settings.ai_enabled) {
      console.error('‚ùå AI je deaktivov√°no v nastaven√≠');
      showErrorToast('AI generov√°n√≠ je deaktivov√°no v nastaven√≠');
      return null;
    }

    // Vytvo≈ô√≠me roz≈°√≠≈ôen√Ω request s progresivn√≠m kontextem
    const enhancedRequest = {
      ...request,
      // P≈ôid√°me kontext pro progresivn√≠ pl√°nov√°n√≠
      progressionContext: request.weekNumber && request.lessonNumber ? {
        weekNumber: request.weekNumber,
        lessonNumber: request.lessonNumber,
        totalLessonInPlan: ((request.weekNumber - 1) * 2) + request.lessonNumber, // P≈ôedpokl√°d√°me 2 hodiny t√Ωdnƒõ
        isFirstLesson: request.weekNumber === 1 && request.lessonNumber === 1,
        previousLessons: request.previousLessonsContext || []
      } : undefined
    };

    // Pou≈æijeme p≈ô√≠slu≈°n√Ω provider s kompletn√≠ logikou
    console.log('üöÄ Pou≈æ√≠v√°m p≈ô√≠slu≈°n√Ω AI provider s kompletn√≠ logikou...');
    let result: LessonGenerationResult | null = null;
    
    if (settings.provider === 'groq') {
      result = await generateWithGroqProvider(settings, enhancedRequest, request.planId);
    } else if (settings.provider === 'openai') {
      result = await generateWithOpenAIProvider(settings, enhancedRequest, request.planId);
    } else {
      throw new Error(`Nepodporovan√Ω AI provider: ${settings.provider}`);
    }

    if (!result) {
      throw new Error('Pr√°zdn√° odpovƒõƒè z AI API');
    }

    console.log('‚úÖ AI √∫spƒõ≈°nƒõ vygenerovalo progresivn√≠ pl√°n hodiny s kompletn√≠ logikou:', {
      preparation: result.exercises.preparation.length + ' cvik≈Ø',
      main: result.exercises.main.length + ' cvik≈Ø', 
      finish: result.exercises.finish.length + ' cvik≈Ø',
      weekNumber: request.weekNumber,
      lessonNumber: request.lessonNumber,
      usedPreviousContext: (request.previousLessonsContext?.length || 0) > 0,
      usedKnowledgeBase: !!request.planId
    });

    return result;

  } catch (error: any) {
    console.error('‚ùå Chyba p≈ôi generov√°n√≠ progresivn√≠ho pl√°nu pomoc√≠ AI s kompletn√≠ logikou:', error);
    
    // Zobraz√≠me chybu u≈æivateli
    showErrorToast(error.message || 'Nastala neoƒçek√°van√° chyba p≈ôi generov√°n√≠ progresivn√≠ho pl√°nu');
    
    // Vr√°t√≠me fallback pl√°n
    console.log('üîÑ Pou≈æ√≠v√°m fallback pl√°n...');
    return {
      exercises: createFallbackPlan(request),
      promptData: {
        systemPrompt: 'Fallback syst√©mov√Ω prompt',
        userPrompt: 'Fallback u≈æivatelsk√Ω prompt - AI nebylo k dispozici'
      }
    };
  }
}
