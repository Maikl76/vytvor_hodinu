
import { toast } from '@/hooks/use-toast';
import { getAiSettings } from './settings-service';
import { getAiGenerationSettings } from './generation-settings-service';
import { generateWithOpenAIProvider } from './openai-provider';
import { generateWithGroqProvider } from './groq-provider';
import { createFallbackPlan } from './utils';
import type { 
  AiSettings, 
  ExerciseItem, 
  LessonExerciseData, 
  PromptData,
  LessonGenerationRequest, 
  LessonGenerationResult,
  ActivityItem
} from './types';

// Re-export types and services
export type { 
  AiSettings, 
  ExerciseItem, 
  LessonExerciseData, 
  PromptData,
  LessonGenerationRequest, 
  LessonGenerationResult,
  ActivityItem
};

export { getAiGenerationSettings } from './generation-settings-service';
export type { AiGenerationSettings } from './generation-settings-service';

/**
 * Hlavn√≠ funkce pro generov√°n√≠ alternativn√≠ho pl√°nu podle nastaven√≠
 */
export async function generateAILessonPlan(request: LessonGenerationRequest & { planId?: string }): Promise<LessonGenerationResult | null> {
  try {
    console.log('ü§ñ Zaƒç√≠n√°m generov√°n√≠ AI pl√°nu s requestem:', request);
    
    // Z√≠sk√°n√≠ nastaven√≠ AI
    const settings = await getAiSettings();
    
    console.log('‚öôÔ∏è Z√≠skan√° AI nastaven√≠:', settings);
    
    if (!settings) {
      console.error('‚ùå ≈Ω√°dn√° AI nastaven√≠ nenalezena');
      toast({
        title: "Chyba nastaven√≠ AI",
        description: "Nebyla nalezena ≈æ√°dn√° nastaven√≠ AI. P≈ôejdƒõte do administr√°torsk√©ho rozhran√≠ a nastavte API kl√≠ƒçe.",
        variant: "destructive",
      });
      return null;
    }
    
    if (!settings.ai_enabled) {
      console.error('‚ùå AI je deaktivov√°no');
      toast({
        title: "AI je deaktivov√°na",
        description: "Asistent AI je deaktivov√°n v nastaven√≠. Aktivujte jej v administr√°torsk√©m rozhran√≠.",
        variant: "destructive",
      });
      return null;
    }
    
    if (!settings.api_key || settings.api_key.trim() === '') {
      console.error('‚ùå Chyb√≠ API kl√≠ƒç');
      toast({
        title: "Chyb√≠ API kl√≠ƒç",
        description: "API kl√≠ƒç pro AI slu≈æbu nen√≠ nastaven. P≈ôejdƒõte do administr√°torsk√©ho rozhran√≠ a nastavte API kl√≠ƒç.",
        variant: "destructive",
      });
      return null;
    }
    
    console.log(`üöÄ Pou≈æ√≠v√°m ${settings.provider} provider s modelem ${settings.model}`);
    
    // Podle poskytovatele vyb√≠r√°me spr√°vnou metodu generov√°n√≠
    const planId = request.planId;
    
    let result: LessonGenerationResult | null = null;
    
    if (settings.provider === 'openai') {
      console.log('üì° Vol√°m OpenAI provider...');
      result = await generateWithOpenAIProvider(settings, request, planId);
    } else if (settings.provider === 'groq') {
      console.log('üì° Vol√°m Groq provider...');
      result = await generateWithGroqProvider(settings, request, planId);
    } else {
      console.error(`‚ùå Nepodporovan√Ω provider: ${settings.provider}`);
      toast({
        title: "Nepodporovan√Ω poskytovatel AI",
        description: `Poskytovatel '${settings.provider}' nen√≠ podporov√°n.`,
        variant: "destructive",
      });
      return null;
    }
    
    if (!result) {
      console.error('‚ùå Provider vr√°til null v√Ωsledek');
      throw new Error('AI slu≈æba nevr√°tila ≈æ√°dn√Ω v√Ωsledek');
    }
    
    console.log('‚úÖ AI √∫spƒõ≈°nƒõ vygenerovalo pl√°n');
    return result;
    
  } catch (error: any) {
    console.error('‚ùå Chyba p≈ôi generov√°n√≠ pl√°nu hodiny:', error);
    toast({
      title: "Chyba p≈ôi generov√°n√≠ pl√°nu",
      description: error.message || "Nastala neoƒçek√°van√° chyba p≈ôi komunikaci s AI slu≈æbou.",
      variant: "destructive",
    });
    
    // V p≈ô√≠padƒõ chyby vrac√≠me z√°lo≈æn√≠ pl√°n
    console.log('üîÑ Pou≈æ√≠v√°m fallback pl√°n...');
    return {
      exercises: createFallbackPlan(request),
      promptData: {
        systemPrompt: "Fallback syst√©mov√Ω prompt",
        userPrompt: "Fallback u≈æivatelsk√Ω prompt - AI nebylo k dispozici"
      }
    };
  }
}
